import requests
import shutil
import os
from datetime import datetime
from fpdf import FPDF
from fastapi import APIRouter, UploadFile, File, Form, HTTPException
from fastapi.responses import FileResponse
from dotenv import load_dotenv
import logging
from typing import Optional, Tuple

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

HF_ENDPOINT = os.getenv("HF_ENDPOINT")
HF_TOKEN = os.getenv("HF_TOKEN")

router = APIRouter()

def analyze_image_score(image_path: str) -> Tuple[int, str]:
    """
    Analyze lesson plan image using Hugging Face endpoint with improved error handling
    Returns a tuple of (score, caption)
    """
    try:
        with open(image_path, "rb") as image_file:
            files = [("data", (os.path.basename(image_path), image_file))]
            headers = {"Authorization": f"Bearer {HF_TOKEN}"}
            payload = {"fn_index": 0}

            # Add timeout to prevent hanging
            resp = requests.post(
                HF_ENDPOINT, 
                headers=headers, 
                files=files, 
                data=payload,
                timeout=30  # 30 seconds timeout
            )
        
        # Check for rate limiting or service issues
        if resp.status_code == 429:
            logger.warning("Rate limited by Hugging Face endpoint")
            return 50, "Basic lesson plan detected (rate limited)"
            
        resp.raise_for_status()
        
        res = resp.json()
        caption = res.get("data", [""])[0]  # Adjust based on actual response format

        # Calculate score based on keywords
        score = 50  # Base score
        low = caption.lower()
        for kw, pts in [("lesson", 20), ("plan", 10), ("handwritten", 10), ("table", 10)]:
            if kw in low:
                score += pts
        
        return min(score, 100), caption
        
    except requests.exceptions.RequestException as e:
        logger.error(f"Error calling Hugging Face endpoint: {e}")
        # Fallback basic analysis
        return 50, "Basic lesson plan detected (analysis service unavailable)"
    except Exception as e:
        logger.error(f"Unexpected error in image analysis: {e}")
        return 50, "Basic lesson plan detected"

def generate_pdf(
    pdf_path: str,
    teacher_name: str,
    school: str,
    caption: str,
    image_path: Optional[str] = None
) -> None:
    """Generate PDF with lesson plan details"""
    try:
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        
        # Header
        pdf.cell(200, 10, txt="Enhanced Lesson Plan", ln=1, align='C')
        pdf.cell(200, 10, txt=f"Teacher: {teacher_name}", ln=1)
        pdf.cell(200, 10, txt=f"School: {school}", ln=1)
        pdf.cell(200, 10, txt=f"Date: {datetime.now().strftime('%Y-%m-%d')}", ln=1)
        pdf.cell(200, 10, txt="Generated by: Dettol Hygiene Quest Program", ln=1)
        
        # Add image if available
        if image_path and os.path.exists(image_path):
            try:
                pdf.image(image_path, x=10, y=60, w=100)
                pdf.set_y(160)  # Position after image
            except Exception as img_error:
                logger.warning(f"Could not add image to PDF: {img_error}")
                pdf.cell(200, 10, txt="[Image could not be embedded]", ln=1)
        
        # Feedback section
        pdf.ln(10)  # Add some space
        pdf.multi_cell(0, 10, txt=f"Feedback:\n{caption}")
        
        pdf.output(pdf_path)
    except Exception as e:
        logger.error(f"Error generating PDF: {e}")
        raise

@router.post("/submit-lessonplan/")
async def submit_lesson_plan(
    file: UploadFile = File(...),
    teacher_name: str = Form(...),
    school: str = Form(...)
):
    """Handle lesson plan submission with robust error handling"""
    try:
        # Create directories if they don't exist
        os.makedirs("lessonplans/uploads", exist_ok=True)
        os.makedirs("lessonplans/generated", exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        image_filename = f"{timestamp}_{file.filename}"
        image_path = f"lessonplans/uploads/{image_filename}"
        pdf_filename = f"{timestamp}_lessonplan.pdf"
        pdf_path = f"lessonplans/generated/{pdf_filename}"
        
        # Save uploaded file
        with open(image_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
        
        # Analyze image (with fallback if HF endpoint fails)
        score, caption = analyze_image_score(image_path)
        
        # Generate enhanced PDF
        generate_pdf(pdf_path, teacher_name, school, caption, image_path)
        
        # Construct download URL
        base_url = os.getenv("BASE_URL", "https://hygienequestemdpoints.onrender.com")
        download_url = f"{base_url}/download-lessonplan/{pdf_filename}"
        
        return {
            "score": score,
            "caption": caption,
            "download_url": download_url,
            "success": True
        }
        
    except Exception as e:
        logger.error(f"Error in lesson plan submission: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to process lesson plan: {str(e)}"
        )

@router.get("/download-lessonplan/{filename}")
async def download_lesson_plan(filename: str):
    """Serve generated PDF files"""
    pdf_path = f"lessonplans/generated/{filename}"
    if not os.path.exists(pdf_path):
        raise HTTPException(
            status_code=404,
            detail="Lesson plan not found"
        )
    return FileResponse(
        pdf_path,
        media_type="application/pdf",
        filename=f"enhanced_{filename}"
    )