import requests
import shutil, os
from datetime import datetime
from fpdf import FPDF
from fastapi import APIRouter, UploadFile, File, Form
from fastapi.responses import FileResponse
from dotenv import load_dotenv

load_dotenv()

HF_ENDPOINT = os.getenv("HF_ENDPOINT")
HF_TOKEN = os.getenv("HF_TOKEN")

router = APIRouter()


def analyze_image_score(image_path: str) -> tuple[int, str]:
    files = [("data", open(image_path, "rb"))]
    headers = {"Authorization": f"Bearer {HF_TOKEN}"}
    payload = {"fn_index": 0}

    resp = requests.post(HF_ENDPOINT, headers=headers, files=files, data=payload)
    resp.raise_for_status()
    res = resp.json()
    caption = res.get("data", [""])[0]  # Adjust this based on actual response format

    score = 50
    low = caption.lower()
    for kw, pts in [("lesson", 20), ("plan", 10), ("handwritten", 10), ("table", 10)]:
        if kw in low:
            score += pts
    return min(score, 100), caption

# MODIFY THIS FUNCTION üëá
@router.post("/submit-lessonplan/")
async def submit_lesson_plan(
    file: UploadFile = File(...),
    teacher_name: str = Form(...),
    school: str = Form(...)
):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    image_path = f"lessonplans/uploads/{timestamp}_{file.filename}"
    os.makedirs("lessonplans/uploads", exist_ok=True)
    
    with open(image_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    # üîç Analyze image using the model
    score, caption = analyze_image_score(image_path)

    # üìÑ Generate enhanced PDF
    pdf_path = f"lessonplans/generated/{timestamp}_lessonplan.pdf"
    os.makedirs("lessonplans/generated", exist_ok=True)

    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="Enhanced Lesson Plan", ln=1, align='C')
    pdf.cell(200, 10, txt=f"Teacher: {teacher_name}", ln=2)
    pdf.cell(200, 10, txt=f"School: {school}", ln=3)
    pdf.cell(200, 10, txt=f"Date: {datetime.now().strftime('%Y-%m-%d')}", ln=4)
    pdf.cell(200, 10, txt="Generated by: Dettol Hygiene Quest Program", ln=5)
    pdf.multi_cell(0, 10, txt=f"\nCaption/Feedback: {caption}")
    pdf.output(pdf_path)

    return {
        "score": score,
        "caption": caption,
        "download_url": f"https://hygienequestemdpoints.onrender.com/download-lessonplan/{os.path.basename(pdf_path)}"
    }
